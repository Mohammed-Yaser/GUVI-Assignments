1. https://github.com/rvsp/typescript-oops/blob/master/Practice/Movie.md
Question 1: 
The class Movie is stated below. An instance of class Movie represents a film. This class has the following three properties:

* title, which is a String representing the title of the movie
* studio, which is a String representing the studio that made the movie
* rating, which is a String representing the rating of the movie (i.e. PG­13, R, etc)

a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.

b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.

c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.

d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”

Answer 1:
Code Starts here...

class Movie {
  //a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.

  //b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.
  constructor(title, studio, rating = "PG") {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }

  //c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.
  static getPG(movieArray) {
    const pgMovieList = [];
    movieArray.forEach(function (movieInstance) {
      Object.keys(movieInstance).forEach(function (dataMember) {
        if (dataMember === "rating" && movieInstance[dataMember] === "PG") {
          pgMovieList.push(movieInstance);
        }
      });
    });
    return pgMovieList;
  }
}

//d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”
const flim1 = new Movie("Casino Royale", "Eon Productions", "PG­13");

const flim2 = new Movie("Justice League", "Warner Bros", "E");
//Testing for default rating as PG
const flim3 = new Movie("Avengers", "Marvel Studio");
const filmArray = [flim1, flim2, flim3]; // Array of all movie objects(flims)

//Testing getPG Method
const pgFlims = Movie.getPG(filmArray);

//Printing Movies with PG Rating
pgFlims.forEach(function (flim) {
  console.log(flim);
});

Output : 
PS C:\Users\LENOVO\Yaser workspace\GUVITASKS\PracticeD2> node script.js
Movie { title: 'Avengers', studio: 'Marvel Studio', rating: 'PG' }



2. https://github.com/rvsp/typescript-oops/blob/master/Practice/class-circle.md
Answer 2:
code starts here...

class Circle {
  constructor(radius, color) {
    this.radius = Number(radius);
    this.color = color;
  }
  getRadius() {
    return this.radius;
  }
  setRadius(radius) {
    this.radius = Number(radius);
  }
  getColor() {
    return this.color;
  }
  setColor(color) {
    this.color = color;
  }
  toString() {
    return `Circle[radius=${this.radius}, color=${this.color}]`;
  }
  getArea() {
    return Math.PI * this.radius ** 2;
  }
  getCircumference() {
    return 2 * Math.PI * this.radius;
  }
}

3.Write a “person” class to hold all the details.
Answer 3:
code starts here...


class Person {
  constructor(name, age, email, phone, city, state, country) {
    this.name = name;
    this.age = Number(age);
    this.email = email;
    this.phone = phone;
    this.city = city;
    this.state = state;
    this.country = country;
  }
}


4.write a class to calculate uber price
Answer 4:
code starts here...

class Uber {
  constructor(distanceInMiles, timeInMins, luxuaryRideStatus = false) {
    this.distanceInMiles = distanceInMiles;
    this.timeInMins = timeInMins;
    this.luxuaryRideStatus = Boolean(luxuaryRideStatus);
  }
  baseFare = 2;
  costPerMinute = 0.1;
  costPerMile = 0.25;

  getUberRideFare() {
    const fare =
      this.baseFare +
      this.costPerMinute * this.timeInMins +
      this.costPerMile * this.distanceInMiles;
    if (this.luxuaryRideStatus) {
      return 2 * fare;
    } else {
      return fare;
    }
  }
}










